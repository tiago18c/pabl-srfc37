/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ABL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const THAW_PERMISSIONLESS_DISCRIMINATOR = 6;

export function getThawPermissionlessDiscriminatorBytes() {
  return getU8Encoder().encode(THAW_PERMISSIONLESS_DISCRIMINATOR);
}

export type ThawPermissionlessInstruction<
  TProgram extends string = typeof ABL_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenAccountOwner extends string | IAccountMeta<string> = string,
  TAccountMintConfig extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountGatingProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountTokenAccountOwner extends string
        ? ReadonlyAccount<TAccountTokenAccountOwner>
        : TAccountTokenAccountOwner,
      TAccountMintConfig extends string
        ? ReadonlyAccount<TAccountMintConfig>
        : TAccountMintConfig,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountGatingProgram extends string
        ? ReadonlyAccount<TAccountGatingProgram>
        : TAccountGatingProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ThawPermissionlessInstructionData = { discriminator: number };

export type ThawPermissionlessInstructionDataArgs = {};

export function getThawPermissionlessInstructionDataEncoder(): Encoder<ThawPermissionlessInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: THAW_PERMISSIONLESS_DISCRIMINATOR })
  );
}

export function getThawPermissionlessInstructionDataDecoder(): Decoder<ThawPermissionlessInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getThawPermissionlessInstructionDataCodec(): Codec<
  ThawPermissionlessInstructionDataArgs,
  ThawPermissionlessInstructionData
> {
  return combineCodec(
    getThawPermissionlessInstructionDataEncoder(),
    getThawPermissionlessInstructionDataDecoder()
  );
}

export type ThawPermissionlessInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountTokenAccountOwner extends string = string,
  TAccountMintConfig extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountGatingProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  tokenAccountOwner: Address<TAccountTokenAccountOwner>;
  mintConfig: Address<TAccountMintConfig>;
  tokenProgram?: Address<TAccountTokenProgram>;
  gatingProgram: Address<TAccountGatingProgram>;
};

export function getThawPermissionlessInstruction<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountTokenAccountOwner extends string,
  TAccountMintConfig extends string,
  TAccountTokenProgram extends string,
  TAccountGatingProgram extends string,
  TProgramAddress extends Address = typeof ABL_PROGRAM_ADDRESS,
>(
  input: ThawPermissionlessInput<
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountTokenAccountOwner,
    TAccountMintConfig,
    TAccountTokenProgram,
    TAccountGatingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ThawPermissionlessInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMint,
  TAccountTokenAccount,
  TAccountTokenAccountOwner,
  TAccountMintConfig,
  TAccountTokenProgram,
  TAccountGatingProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ABL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    tokenAccountOwner: {
      value: input.tokenAccountOwner ?? null,
      isWritable: false,
    },
    mintConfig: { value: input.mintConfig ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    gatingProgram: { value: input.gatingProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.tokenAccountOwner),
      getAccountMeta(accounts.mintConfig),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.gatingProgram),
    ],
    programAddress,
    data: getThawPermissionlessInstructionDataEncoder().encode({}),
  } as ThawPermissionlessInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountTokenAccountOwner,
    TAccountMintConfig,
    TAccountTokenProgram,
    TAccountGatingProgram
  >;

  return instruction;
}

export type ParsedThawPermissionlessInstruction<
  TProgram extends string = typeof ABL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    mint: TAccountMetas[1];
    tokenAccount: TAccountMetas[2];
    tokenAccountOwner: TAccountMetas[3];
    mintConfig: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    gatingProgram: TAccountMetas[6];
  };
  data: ThawPermissionlessInstructionData;
};

export function parseThawPermissionlessInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedThawPermissionlessInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mint: getNextAccount(),
      tokenAccount: getNextAccount(),
      tokenAccountOwner: getNextAccount(),
      mintConfig: getNextAccount(),
      tokenProgram: getNextAccount(),
      gatingProgram: getNextAccount(),
    },
    data: getThawPermissionlessInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}

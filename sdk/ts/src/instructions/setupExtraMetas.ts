/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  AccountRole,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
} from '@solana/kit';
import { ABL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SETUP_EXTRA_METAS_DISCRIMINATOR = 3;

export function getSetupExtraMetasDiscriminatorBytes() {
  return getU8Encoder().encode(SETUP_EXTRA_METAS_DISCRIMINATOR);
}

export type SetupExtraMetasInstruction<
  TProgram extends string = typeof ABL_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountEbaltsMintConfig extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountExtraMetas extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountEbaltsMintConfig extends string
        ? ReadonlyAccount<TAccountEbaltsMintConfig>
        : TAccountEbaltsMintConfig,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountExtraMetas extends string
        ? ReadonlyAccount<TAccountExtraMetas>
        : TAccountExtraMetas,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetupExtraMetasInstructionData = {
  discriminator: number;
  newFreezeAuthority: Address;
};

export type SetupExtraMetasInstructionDataArgs = {
  newFreezeAuthority: Address;
};

export function getSetupExtraMetasInstructionDataEncoder(): Encoder<SetupExtraMetasInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['newFreezeAuthority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SETUP_EXTRA_METAS_DISCRIMINATOR })
  );
}

export function getSetupExtraMetasInstructionDataDecoder(): Decoder<SetupExtraMetasInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['newFreezeAuthority', getAddressDecoder()],
  ]);
}

export function getSetupExtraMetasInstructionDataCodec(): Codec<
  SetupExtraMetasInstructionDataArgs,
  SetupExtraMetasInstructionData
> {
  return combineCodec(
    getSetupExtraMetasInstructionDataEncoder(),
    getSetupExtraMetasInstructionDataDecoder()
  );
}

export type SetupExtraMetasInput<
  TAccountAuthority extends string = string,
  TAccountEbaltsMintConfig extends string = string,
  TAccountMint extends string = string,
  TAccountExtraMetas extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  ebaltsMintConfig: Address<TAccountEbaltsMintConfig>;
  mint: Address<TAccountMint>;
  extraMetas: Address<TAccountExtraMetas>;
  systemProgram?: Address<TAccountSystemProgram>;
  newFreezeAuthority: SetupExtraMetasInstructionDataArgs['newFreezeAuthority'];
  lists: Array<Address>;
};

export function getSetupExtraMetasInstruction<
  TAccountAuthority extends string,
  TAccountEbaltsMintConfig extends string,
  TAccountMint extends string,
  TAccountExtraMetas extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ABL_PROGRAM_ADDRESS,
>(
  input: SetupExtraMetasInput<
    TAccountAuthority,
    TAccountEbaltsMintConfig,
    TAccountMint,
    TAccountExtraMetas,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetupExtraMetasInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountEbaltsMintConfig,
  TAccountMint,
  TAccountExtraMetas,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ABL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    ebaltsMintConfig: {
      value: input.ebaltsMintConfig ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    extraMetas: { value: input.extraMetas ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: IAccountMeta[] = args.lists.map((address) => ({
    address,
    role: AccountRole.READONLY,
  }));

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.ebaltsMintConfig),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.extraMetas),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getSetupExtraMetasInstructionDataEncoder().encode(
      args as SetupExtraMetasInstructionDataArgs
    ),
  } as SetupExtraMetasInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountEbaltsMintConfig,
    TAccountMint,
    TAccountExtraMetas,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSetupExtraMetasInstruction<
  TProgram extends string = typeof ABL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    ebaltsMintConfig: TAccountMetas[1];
    mint: TAccountMetas[2];
    extraMetas: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: SetupExtraMetasInstructionData;
};

export function parseSetupExtraMetasInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetupExtraMetasInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      ebaltsMintConfig: getNextAccount(),
      mint: getNextAccount(),
      extraMetas: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSetupExtraMetasInstructionDataDecoder().decode(instruction.data),
  };
}

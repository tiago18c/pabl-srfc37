/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ABL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_WALLET_DISCRIMINATOR = 2;

export function getAddWalletDiscriminatorBytes() {
  return getU8Encoder().encode(ADD_WALLET_DISCRIMINATOR);
}

export type AddWalletInstruction<
  TProgram extends string = typeof ABL_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountListConfig extends string | IAccountMeta<string> = string,
  TAccountWallet extends string | IAccountMeta<string> = string,
  TAccountWalletEntry extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountListConfig extends string
        ? WritableAccount<TAccountListConfig>
        : TAccountListConfig,
      TAccountWallet extends string
        ? ReadonlyAccount<TAccountWallet>
        : TAccountWallet,
      TAccountWalletEntry extends string
        ? WritableAccount<TAccountWalletEntry>
        : TAccountWalletEntry,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddWalletInstructionData = { discriminator: number };

export type AddWalletInstructionDataArgs = {};

export function getAddWalletInstructionDataEncoder(): Encoder<AddWalletInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: ADD_WALLET_DISCRIMINATOR })
  );
}

export function getAddWalletInstructionDataDecoder(): Decoder<AddWalletInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getAddWalletInstructionDataCodec(): Codec<
  AddWalletInstructionDataArgs,
  AddWalletInstructionData
> {
  return combineCodec(
    getAddWalletInstructionDataEncoder(),
    getAddWalletInstructionDataDecoder()
  );
}

export type AddWalletInput<
  TAccountAuthority extends string = string,
  TAccountListConfig extends string = string,
  TAccountWallet extends string = string,
  TAccountWalletEntry extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  listConfig: Address<TAccountListConfig>;
  wallet: Address<TAccountWallet>;
  walletEntry: Address<TAccountWalletEntry>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getAddWalletInstruction<
  TAccountAuthority extends string,
  TAccountListConfig extends string,
  TAccountWallet extends string,
  TAccountWalletEntry extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ABL_PROGRAM_ADDRESS,
>(
  input: AddWalletInput<
    TAccountAuthority,
    TAccountListConfig,
    TAccountWallet,
    TAccountWalletEntry,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddWalletInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountListConfig,
  TAccountWallet,
  TAccountWalletEntry,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ABL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    listConfig: { value: input.listConfig ?? null, isWritable: true },
    wallet: { value: input.wallet ?? null, isWritable: false },
    walletEntry: { value: input.walletEntry ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.listConfig),
      getAccountMeta(accounts.wallet),
      getAccountMeta(accounts.walletEntry),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getAddWalletInstructionDataEncoder().encode({}),
  } as AddWalletInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountListConfig,
    TAccountWallet,
    TAccountWalletEntry,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedAddWalletInstruction<
  TProgram extends string = typeof ABL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    listConfig: TAccountMetas[1];
    wallet: TAccountMetas[2];
    walletEntry: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: AddWalletInstructionData;
};

export function parseAddWalletInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddWalletInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      listConfig: getNextAccount(),
      wallet: getNextAccount(),
      walletEntry: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAddWalletInstructionDataDecoder().decode(instruction.data),
  };
}

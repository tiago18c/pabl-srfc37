/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import { WalletEntrySeeds, findWalletEntryPda } from '../pdas';

export const WALLET_ENTRY_DISCRIMINATOR = 2;

export function getWalletEntryDiscriminatorBytes() {
  return getU8Encoder().encode(WALLET_ENTRY_DISCRIMINATOR);
}

export type WalletEntry = {
  discriminator: number;
  walletAddress: Address;
  listConfig: Address;
};

export type WalletEntryArgs = { walletAddress: Address; listConfig: Address };

export function getWalletEntryEncoder(): Encoder<WalletEntryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['walletAddress', getAddressEncoder()],
      ['listConfig', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: WALLET_ENTRY_DISCRIMINATOR })
  );
}

export function getWalletEntryDecoder(): Decoder<WalletEntry> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['walletAddress', getAddressDecoder()],
    ['listConfig', getAddressDecoder()],
  ]);
}

export function getWalletEntryCodec(): Codec<WalletEntryArgs, WalletEntry> {
  return combineCodec(getWalletEntryEncoder(), getWalletEntryDecoder());
}

export function decodeWalletEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<WalletEntry, TAddress>;
export function decodeWalletEntry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<WalletEntry, TAddress>;
export function decodeWalletEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<WalletEntry, TAddress> | MaybeAccount<WalletEntry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWalletEntryDecoder()
  );
}

export async function fetchWalletEntry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<WalletEntry, TAddress>> {
  const maybeAccount = await fetchMaybeWalletEntry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWalletEntry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<WalletEntry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWalletEntry(maybeAccount);
}

export async function fetchAllWalletEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<WalletEntry>[]> {
  const maybeAccounts = await fetchAllMaybeWalletEntry(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWalletEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<WalletEntry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeWalletEntry(maybeAccount));
}

export function getWalletEntrySize(): number {
  return 65;
}

export async function fetchWalletEntryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: WalletEntrySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<WalletEntry>> {
  const maybeAccount = await fetchMaybeWalletEntryFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWalletEntryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: WalletEntrySeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<WalletEntry>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findWalletEntryPda(seeds, { programAddress });
  return await fetchMaybeWalletEntry(rpc, address, fetchConfig);
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddWalletInstruction,
  type ParsedFreezeInstruction,
  type ParsedFreezePermissionlessInstruction,
  type ParsedInitListInstruction,
  type ParsedRemoveWalletInstruction,
  type ParsedSetupExtraMetasInstruction,
  type ParsedThawInstruction,
  type ParsedThawPermissionlessInstruction,
  type ParsedTogglePermissionlessInstructionsInstruction,
} from '../instructions';

export const ABL_PROGRAM_ADDRESS =
  'Eba1ts11111111111111111111111111111111111111' as Address<'Eba1ts11111111111111111111111111111111111111'>;

export enum AblAccount {
  ListConfig,
  WalletEntry,
}

export function identifyAblAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AblAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return AblAccount.ListConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return AblAccount.WalletEntry;
  }
  throw new Error(
    'The provided account could not be identified as a abl account.'
  );
}

export enum AblInstruction {
  InitList,
  AddWallet,
  RemoveWallet,
  SetupExtraMetas,
  Thaw,
  Freeze,
  ThawPermissionless,
  FreezePermissionless,
  TogglePermissionlessInstructions,
}

export function identifyAblInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AblInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return AblInstruction.InitList;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return AblInstruction.AddWallet;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return AblInstruction.RemoveWallet;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return AblInstruction.SetupExtraMetas;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return AblInstruction.Thaw;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return AblInstruction.Freeze;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return AblInstruction.ThawPermissionless;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return AblInstruction.FreezePermissionless;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return AblInstruction.TogglePermissionlessInstructions;
  }
  throw new Error(
    'The provided instruction could not be identified as a abl instruction.'
  );
}

export type ParsedAblInstruction<
  TProgram extends string = 'Eba1ts11111111111111111111111111111111111111',
> =
  | ({
      instructionType: AblInstruction.InitList;
    } & ParsedInitListInstruction<TProgram>)
  | ({
      instructionType: AblInstruction.AddWallet;
    } & ParsedAddWalletInstruction<TProgram>)
  | ({
      instructionType: AblInstruction.RemoveWallet;
    } & ParsedRemoveWalletInstruction<TProgram>)
  | ({
      instructionType: AblInstruction.SetupExtraMetas;
    } & ParsedSetupExtraMetasInstruction<TProgram>)
  | ({ instructionType: AblInstruction.Thaw } & ParsedThawInstruction<TProgram>)
  | ({
      instructionType: AblInstruction.Freeze;
    } & ParsedFreezeInstruction<TProgram>)
  | ({
      instructionType: AblInstruction.ThawPermissionless;
    } & ParsedThawPermissionlessInstruction<TProgram>)
  | ({
      instructionType: AblInstruction.FreezePermissionless;
    } & ParsedFreezePermissionlessInstruction<TProgram>)
  | ({
      instructionType: AblInstruction.TogglePermissionlessInstructions;
    } & ParsedTogglePermissionlessInstructionsInstruction<TProgram>);

//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct SetupExtraMetas {
      
              
          pub authority: solana_program::pubkey::Pubkey,
          
              
          pub ebalts_mint_config: solana_program::pubkey::Pubkey,
          
              
          pub mint: solana_program::pubkey::Pubkey,
          
              
          pub extra_metas: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl SetupExtraMetas {
  pub fn instruction(&self, args: SetupExtraMetasInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: SetupExtraMetasInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ebalts_mint_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.extra_metas,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&SetupExtraMetasInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ABL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SetupExtraMetasInstructionData {
            discriminator: u8,
            }

impl SetupExtraMetasInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: 3,
                                }
  }
}

impl Default for SetupExtraMetasInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SetupExtraMetasInstructionArgs {
                  pub new_freeze_authority: Pubkey,
      }


/// Instruction builder for `SetupExtraMetas`.
///
/// ### Accounts:
///
                ///   0. `[signer]` authority
          ///   1. `[]` ebalts_mint_config
          ///   2. `[]` mint
          ///   3. `[]` extra_metas
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct SetupExtraMetasBuilder {
            authority: Option<solana_program::pubkey::Pubkey>,
                ebalts_mint_config: Option<solana_program::pubkey::Pubkey>,
                mint: Option<solana_program::pubkey::Pubkey>,
                extra_metas: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                        new_freeze_authority: Option<Pubkey>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SetupExtraMetasBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn ebalts_mint_config(&mut self, ebalts_mint_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.ebalts_mint_config = Some(ebalts_mint_config);
                    self
    }
            #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mint = Some(mint);
                    self
    }
            #[inline(always)]
    pub fn extra_metas(&mut self, extra_metas: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.extra_metas = Some(extra_metas);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn new_freeze_authority(&mut self, new_freeze_authority: Pubkey) -> &mut Self {
        self.new_freeze_authority = Some(new_freeze_authority);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = SetupExtraMetas {
                              authority: self.authority.expect("authority is not set"),
                                        ebalts_mint_config: self.ebalts_mint_config.expect("ebalts_mint_config is not set"),
                                        mint: self.mint.expect("mint is not set"),
                                        extra_metas: self.extra_metas.expect("extra_metas is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
          let args = SetupExtraMetasInstructionArgs {
                                                              new_freeze_authority: self.new_freeze_authority.clone().expect("new_freeze_authority is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `setup_extra_metas` CPI accounts.
  pub struct SetupExtraMetasCpiAccounts<'a, 'b> {
          
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub ebalts_mint_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub extra_metas: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `setup_extra_metas` CPI instruction.
pub struct SetupExtraMetasCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub ebalts_mint_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub extra_metas: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: SetupExtraMetasInstructionArgs,
  }

impl<'a, 'b> SetupExtraMetasCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: SetupExtraMetasCpiAccounts<'a, 'b>,
              args: SetupExtraMetasInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              authority: accounts.authority,
              ebalts_mint_config: accounts.ebalts_mint_config,
              mint: accounts.mint,
              extra_metas: accounts.extra_metas,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ebalts_mint_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.extra_metas.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&SetupExtraMetasInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ABL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authority.clone());
                        account_infos.push(self.ebalts_mint_config.clone());
                        account_infos.push(self.mint.clone());
                        account_infos.push(self.extra_metas.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `SetupExtraMetas` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` authority
          ///   1. `[]` ebalts_mint_config
          ///   2. `[]` mint
          ///   3. `[]` extra_metas
          ///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct SetupExtraMetasCpiBuilder<'a, 'b> {
  instruction: Box<SetupExtraMetasCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SetupExtraMetasCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(SetupExtraMetasCpiBuilderInstruction {
      __program: program,
              authority: None,
              ebalts_mint_config: None,
              mint: None,
              extra_metas: None,
              system_program: None,
                                            new_freeze_authority: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn ebalts_mint_config(&mut self, ebalts_mint_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.ebalts_mint_config = Some(ebalts_mint_config);
                    self
    }
      #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint = Some(mint);
                    self
    }
      #[inline(always)]
    pub fn extra_metas(&mut self, extra_metas: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.extra_metas = Some(extra_metas);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn new_freeze_authority(&mut self, new_freeze_authority: Pubkey) -> &mut Self {
        self.instruction.new_freeze_authority = Some(new_freeze_authority);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = SetupExtraMetasInstructionArgs {
                                                              new_freeze_authority: self.instruction.new_freeze_authority.clone().expect("new_freeze_authority is not set"),
                                    };
        let instruction = SetupExtraMetasCpi {
        __program: self.instruction.__program,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          ebalts_mint_config: self.instruction.ebalts_mint_config.expect("ebalts_mint_config is not set"),
                  
          mint: self.instruction.mint.expect("mint is not set"),
                  
          extra_metas: self.instruction.extra_metas.expect("extra_metas is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct SetupExtraMetasCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                ebalts_mint_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                extra_metas: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        new_freeze_authority: Option<Pubkey>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

